m.global.addFields({
    testCoverage: {}
    testCoverageReport: {}
})

m.global.testCoverage =
{
  "input2.brs": [true, invalid, ....] '-> % covered
  "input1.brs": [true, invalid, ....]
}

TEST_COVERAGE_LINES_COVERED_INDEX = 0
TEST_COVERAGE_LINES_TOTAL_INDEX = 1
m.global.testCoverageReport["input2.brs"][TEST_COVERAGE_LINES_COVERED_INDEX]

m.global.testCoverageReport =
{
  "input2.brs": {
    linesCovered: 57 #if <> invalid
    lines: 250 '#size
  }
  "input1.brs": {
    linesCovered: 320
    lines: 400
  }
}

for component in m.global.testCoverage
    uncoveredLines = []
    linesCount = component.count()
    for i in linesCount
        if component[i] <> true
            uncoveredLines.pop(i)
        end if
    end for
    coveredCount = linesCount - uncoveredLines.count()
    coveragePercent = (coveredCount / linesCount * 100).toStr()
    ?"================================================================="
    ?substitute("===   Component {} Test Suite:", component)
    ?"==="
    ?substitute("===   Total  = {} ; Covered  =  {} ; Uncovered   =  {} ; Coverage: {}%", linesCount, coveredCount, uncoveredLines.count(), coveragePercent)
    if uncoveredLines.count() > 0
        uncoveredLinesString = "===   Uncovered Line(s): "
        for each line in uncoveredLines
            uncoveredLinesString += " " + str(line) + ", "
        end for
        uncoveredLinesString = left(uncoveredLinesString, len(uncoveredLinesString) - 2)
        ?uncoveredLinesString
    end if
    ?"================================================================="
end for


->
=================================================================
===   input2.brs suite:
===
===   Total  = 250 ; Covered  =  57 ; Uncovered   =  193 ; Coverage(%): 57/250*100
=================================================================
=================================================================
===   input1.brs suite:
===
===   Total  = ..250 ; Covered  =  57 ; Uncovered   =  193 ; Coverage(%): 57/250*100
===   Uncovered Lines: 12, 56, 89, 12, 
=================================================================

***
***   Total  = 540 ; Covered  =  377 ; Uncovered   =  193 ; Coverage(%): 57/250*100
***
******************************************************************
*************             End report                 *************
******************************************************************
******************************************************************

///////////////////////////////////
sub init()
m.global.testCoverage["input2.brs"] = CreateObject("roArray", #size, false)
m.global.testCoverage["input2.brs"][0] = true
-------
  signalBeacon("EPGLaunchInitiate")

m.global.testCoverage["input2.brs"][1] = true
-------
  m.components.append({
    border: m.top.findNode("border")
    debounceLoad: m.top.findNode("debounceLoad")
    debouncePersistState: m.top.findNode("debouncePersistState")
    inner: m.top.findNode("inner")
    loading: m.top.findNode("loading")
  })

export ROKU_DEV_TARGET=192.168.2.89
export DEVPASSWORD=aaaa
cd /Users/eastagile/code/roku-prototype
make install

curl -X POST http://192.168.2.89:8060/launch/dev\?RunTests\=true

sub animated_markTestCoverage(componentName As String, index)
  componentCoverage = m.global.testCoverage[componentName]
  componentCoverage[index] = true
  m.global.testCoverage[componentName] = componentCoverage
end sub
markTestCoverage("animated", 0)
